- hosts: localhost
  vars:
   aws_access_key: "AKIAJJ7A2SNS2WBCDRIA"
   aws_secret_key: "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"
   pem: "myprivatekey.pem"
  tasks:
    - name: Get my current IP address
      uri:
        url: http://checkip.amazonaws.com/
        return_content: yes
      register: my_ip

    - name: Create simple security group
      ec2_group:
        name: webservers
        description: A security group for my current IP
        region: us-east-1
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
        rules_egress:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: webservers_group
      
          - name: Create the ELB only listening over port 80
      ec2_elb_lb:
        name: my-load-balancer
        state: present
        region: us-east-1
        zones:
         - us-east-1a
         - us-east-1b
        listeners:
           - protocol: http
             load_balancer_port: 80
             instance_port: 80
      register: elb

    - name: Create EC2 instances
      ec2:
       aws_access_key:   "{{ aws_access_key }}"
       aws_secret_key:   "{{ aws_secret_key }}"
       keypair: "{{ pem }}"
       instance_type: t2.micro
       image: ami-c58c1dd3
       region: us-east-1
       zone: us-east-1a
       group_id:
        - "{{ webservers_group.group_id }}"
        - "{{ elb.elb.security_group_ids | first }}"
       wait: yes
       instance_tags:
         application: my_elb_test
       exact_count: 2
       count_tag:
         application: my_elb_test
      register: ec2_instances
      
      
          - name: Store EC2 instance IPs to provision against
      add_host:
       hostname: "{{ item.public_ip }}"
       groupname: ec2_instance_ips
      with_items: "{{ ec2_instances.tagged_instances }}"

    - name: Wait for servers to come online
      wait_for:
       host: "{{ item.public_ip }}"
       port: 22
       timeout: 180
      with_items: "{{ ec2_instances.tagged_instances }}"

    - name: Add EC2 instances as known hosts
      known_hosts:
        name: "{{ item.public_ip }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
      with_items: "{{ ec2_instances.tagged_instances }}"

- hosts: ec2_instance_ips
  become_user: ec2-user
  become_method: sudo
  tasks:
    - name: Install nginx
      apt:
        name: nginx
        state: present
    - name: Create default index page
      copy:
        dest: /usr/share/nginx/html/index.html
        content: "Howdy from {{ ansible_hostname }}"
    - name: Restart nginx
      service:
        name: nginx
        state: restarted
        
- hosts: localhost
  tasks:
    - name: Add each EC2 instance to the ELB
      ec2_elb:
        state: present
        ec2_elbs: my-load-balancer
        region: us-east-1
        instance_id: "{{ item.id }}"
      with_items: "{{ ec2_instances.tagged_instances }}"
        
